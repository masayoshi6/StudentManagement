@Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Student student = (Student) o;
    return Objects.equals(id, student.id) && Objects.equals(name, student.name)
        && Objects.equals(kanaName, student.kanaName) && Objects.equals(nickname, student.nickname)
        && Objects.equals(email, student.email) && Objects.equals(area, student.area)
        && Objects.equals(age, student.age) && Objects.equals(sex, student.sex)
        && Objects.equals(remark, student.remark) && Objects.equals(isDeleted, student.isDeleted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, kanaName, nickname, email, area, age, sex, remark, isDeleted);
  }




  @Override
    public boolean equals(Object o) {
      if (this == o) {
        return true;
      }
      if (o == null || getClass() != o.getClass()) {
        return false;
      }
      StudentCourse that = (StudentCourse) o;
      return Objects.equals(id, that.id) &&
          Objects.equals(studentId, that.studentId) &&
          Objects.equals(courseName, that.courseName) &&
          Objects.equals(courseStartAt, that.courseStartAt) &&
          Objects.equals(courseEndAt, that.courseEndAt);
    }

    @Override
    public int hashCode() {
      return Objects.hash(id, studentId, courseName, courseStartAt, courseEndAt);
    }




    @Override
      public boolean equals(Object o) {
        if (this == o) {
          return true;
        }
        if (o == null || getClass() != o.getClass()) {
          return false;
        }
        StudentDetail that = (StudentDetail) o;
        return Objects.equals(student, that.student) &&
            Objects.equals(studentCourseList, that.studentCourseList);
      }

      @Override
      public int hashCode() {
        return Objects.hash(student, studentCourseList);
      }





@Test
  void 受講生詳細検索＿リポジトリの処理が適切に呼び出せており受講生詳細のオブジェクトが正確に返されていること() {
    Student student = new Student("777", "田中太郎", "タナカタロウ", "タロ",
        "tokiwa@example.com", "名古屋", 18, "男性", "とても頑張ります", false);
    List<StudentCourse> studentCourses = new ArrayList<>();

    StudentCourse studentCourse = new StudentCourse("99", "777", "Javaコース",
        LocalDateTime.of(2025, 4, 1, 00, 00, 00),
        LocalDateTime.of(2026, 3, 31, 00, 00, 00));

    studentCourses.add(studentCourse);

    when(repository.searchStudent("777")).thenReturn(student);
    when(repository.searchStudentCourse(student.getId())).thenReturn(studentCourses);

    StudentDetail expected = new StudentDetail(student, studentCourses);
    StudentDetail actual = sut.searchStudent("777");

    verify(repository, times(1)).searchStudent("777");
    verify(repository, times(1)).searchStudentCourse(student.getId());
    Assertions.assertEquals(expected, actual);
  }

  @Test
  void 受講生登録＿リポジトリと受講生コース情報を登録する際の初期情報を設定する処理及び登録情報をまとめた受講生詳細のオブジェクトが正確に返されていること() {
    Student student = new Student("777", "田中太郎", "タナカタロウ", "タロ",
        "tokiwa@example.com", "名古屋", 18, "男性", "とても頑張ります", false);
    List<StudentCourse> studentCourses = new ArrayList<>();

    StudentCourse studentCourse = new StudentCourse("99", "777", "Javaコース",
        LocalDateTime.of(2025, 4, 1, 00, 00, 00),
        LocalDateTime.of(2026, 3, 31, 00, 00, 00));

    studentCourses.add(studentCourse);

    StudentDetail expected = new StudentDetail(student, studentCourses);
    StudentDetail actual = sut.registerStudent(new StudentDetail(student, studentCourses));

    verify(repository, times(1)).registerStudent(student);
    verify(repository, times(1)).registerStudentCourse(studentCourse);
    Assertions.assertEquals(expected, actual);
  }

  @Test
  void 受講生情報の更新＿リポジトリの処理が適切に呼び出せていること() {
    Student student = new Student("777", "田中太郎", "タナカタロウ", "タロ",
        "tokiwa@example.com", "名古屋", 18, "男性", "とても頑張ります", false);
    List<StudentCourse> studentCourses = new ArrayList<>();

    StudentCourse studentCourse = new StudentCourse("99", "777", "Javaコース",
        LocalDateTime.of(2025, 4, 1, 00, 00, 00),
        LocalDateTime.of(2026, 3, 31, 00, 00, 00));

    studentCourses.add(studentCourse);
    StudentDetail studentDetail = new StudentDetail(student, studentCourses);

    sut.updateStudent(studentDetail);

    verify(repository, times(1)).updateStudent(student);
    verify(repository, times(1)).updateStudentCourse(studentCourse);
  }